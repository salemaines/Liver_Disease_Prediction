full_model <- glm(full_formula, data = data, family = binomial)
# Use stepAIC for stepwise regression
step_model <- stepAIC(full_model, direction = direction, trace = FALSE,
k = log(nrow(data)), # AIC using BIC criterion
scope = list(lower = response_var ~ 1, upper = full_formula),
keep = function(model, ...) {
# Evaluate the model
preds <- predict(model, data, type = "response")
pred_class <- ifelse(preds > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = data[[response_var]])
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
# Log the model formula and accuracy
formula_text <- as.character(formula(model))
model_log[[length(model_log) + 1]] <<- list(
Formula = formula_text,
Accuracy = round(accuracy * 100, 2)
)
# Return the model for the step function to evaluate
return(TRUE)
})
# Return the final model and the log
return(list(final_model = step_model, model_log = model_log))
}
# Example dataset
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# Split data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Run the custom stepwise logistic regression
result <- custom_stepwise(train_data, response_var = "Diagnosis")
# Print the logged models
cat("Models built during stepwise regression:\n")
for (i in seq_along(result$model_log)) {
cat(sprintf("Model %d: %s\n", i, result$model_log[[i]]$Formula))
cat(sprintf("  Accuracy: %.2f%%\n\n", result$model_log[[i]]$Accuracy))
}
# Use the final model for evaluation on the test set
final_model <- result$final_model
summary(final_model)
pred_probs <- predict(final_model, test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
# Confusion matrix for the test set
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
print(conf_matrix)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat(sprintf("Test Accuracy: %.2f%%\n", accuracy * 100))
# Define a custom function for stepwise logistic regression
custom_stepwise <- function(data, response_var, direction = "both") {
# Initialize an empty list to store model details
model_log <- list()
# Create the full model formula
predictors <- setdiff(names(data), response_var) # All columns except the response
full_formula <- as.formula(paste(response_var, "~", paste(predictors, collapse = "+")))
# Fit the full model
full_model <- glm(full_formula, data = data, family = binomial)
# Use stepAIC for stepwise regression
step_model <- stepAIC(full_model, direction = direction, trace = FALSE,
k = log(nrow(data)), # AIC using BIC criterion
scope = list(lower = response_var ~ 1, upper = full_formula),
keep = function(model, ...) {
# Evaluate the model
preds <- predict(model, data, type = "response")
pred_class <- ifelse(preds > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = data[[response_var]])
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
# Log the model formula and accuracy
formula_text <- as.character(formula(model))
model_log[[length(model_log) + 1]] <<- list(
Formula = formula_text,
Accuracy = round(accuracy * 100, 2)
)
# Return the model for the step function to evaluate
return(TRUE)
})
# Return the final model and the log
return(list(final_model = step_model, model_log = model_log))
}
# Example dataset
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# Split data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Run the custom stepwise logistic regression
result <- custom_stepwise(train_data, response_var = "Diagnosis")
# Print the logged models
cat("Models built during stepwise regression:\n")
for (i in seq_along(result$model_log)) {
cat(sprintf("Model %d: %s\n", i, result$model_log[[i]]$Formula))
cat(sprintf("  Accuracy: %.2f%%\n\n", result$model_log[[i]]$Accuracy))
}
for (i in seq_along(result$model_log)) {
cat(sprintf("Model %d: %s\n", i, result$model_log[[i]]$Formula))
cat(sprintf("  Accuracy: %.2f%%\n\n", result$model_log[[i]]$Accuracy))
}
# Print the logged models
cat("Models built during stepwise regression:\n")
for (i in seq_along(result$model_log)) {
cat(sprintf("Model %d: %s\n", i, result$model_log[[i]]$Formula))
cat(sprintf("  Accuracy: %.2f%%\n\n", result$model_log[[i]]$Accuracy))
}
# Custom Stepwise Function with Clean Logging
custom_stepwise <- function(data, response_var, direction = "both") {
# Initialize an empty list to store model details
model_log <- list()
# Create the full model formula
predictors <- setdiff(names(data), response_var) # All columns except the response
full_formula <- as.formula(paste(response_var, "~", paste(predictors, collapse = "+")))
# Fit the full model
full_model <- glm(full_formula, data = data, family = binomial)
# Use stepAIC for stepwise regression
step_model <- stepAIC(full_model, direction = direction, trace = FALSE,
k = log(nrow(data)), # AIC using BIC criterion
scope = list(lower = as.formula(paste(response_var, "~ 1")), upper = full_formula),
keep = function(model, ...) {
# Evaluate the model
preds <- predict(model, data, type = "response")
pred_class <- ifelse(preds > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = data[[response_var]])
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
# Log the model formula and accuracy
formula_text <- deparse(formula(model)) # Clean formula representation
model_log[[length(model_log) + 1]] <<- list(
Formula = formula_text,
Accuracy = round(accuracy * 100, 2)
)
# Return the model for the step function to evaluate
return(TRUE)
})
# Return the final model and the log
return(list(final_model = step_model, model_log = model_log))
}
# Example dataset
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# Split data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Example Usage
result <- custom_stepwise(train_data, response_var = "Diagnosis")
# Print the logged models
cat("Models built during stepwise regression:\n")
for (i in seq_along(result$model_log)) {
cat(sprintf("Model %d: %s\n", i, paste(result$model_log[[i]]$Formula, collapse = " "))) # Cleaned formula
cat(sprintf("  Accuracy: %.2f%%\n\n", result$model_log[[i]]$Accuracy))
}
# Custom Stepwise Function with Clean Logging
custom_stepwise <- function(data, response_var, direction = "both") {
# Initialize an empty list to store model details
model_log <- list()
# Create the full model formula
predictors <- setdiff(names(data), response_var) # All columns except the response
full_formula <- as.formula(paste(response_var, "~", paste(predictors, collapse = "+")))
# Fit the full model
full_model <- glm(full_formula, data = data, family = binomial)
# Use stepAIC for stepwise regression
step_model <- stepAIC(full_model, direction = direction, trace = FALSE,
k = log(nrow(data)), # AIC using BIC criterion
scope = list(lower = as.formula(paste(response_var, "~ 1")), upper = full_formula),
keep = function(model, ...) {
# Evaluate the model
preds <- predict(model, data, type = "response")
pred_class <- ifelse(preds > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = data[[response_var]])
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
# Log the model formula and accuracy
formula_text <- deparse(formula(model)) # Clean formula representation
model_log[[length(model_log) + 1]] <<- list(
Formula = formula_text,
Accuracy = round(accuracy * 100, 2)
)
# Return the model for the step function to evaluate
return(TRUE)
})
# Return the final model and the log
return(list(final_model = step_model, model_log = model_log))
}
# Example dataset
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# Split data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Example Usage
result <- custom_stepwise(train_data, response_var = "Diagnosis")
log_file <- "stepwise_model_log.txt"
cat("Models built during stepwise regression:\n", file = log_file)
for (i in seq_along(result$model_log)) {
cat(sprintf("Model %d: %s\n", i, paste(result$model_log[[i]]$Formula, collapse = " ")),
file = log_file, append = TRUE)
cat(sprintf("  Accuracy: %.2f%%\n\n", result$model_log[[i]]$Accuracy),
file = log_file, append = TRUE)
}
cat(sprintf("Model logs written to %s\n", log_file))
file.show("stepwise_model_log.txt")
# Example dataset
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# Split data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Full model for stepwise regression
full_model <- glm(Diagnosis ~ ., data = train_data, family = binomial)
# Initialize log storage
model_log <- list()
# Custom stepwise function with logging
stepwise_custom <- function(model) {
step_model <- stepAIC(
model,
direction = "both",
trace = FALSE,  # Suppress console output
scope = list(lower = ~1, upper = full_model)
)
# Log intermediate models
intermediate_model <- list(
Formula = as.character(formula(step_model)),
Accuracy = sum(diag(table(predict(step_model, type = "response") > 0.5, train_data$Diagnosis))) / nrow(train_data) * 100
)
model_log <<- append(model_log, list(intermediate_model))
return(step_model)
}
# Run custom stepwise with logging
final_model <- stepwise_custom(full_model)
# Save log to file
log_file <- "stepwise_model_log.txt"
writeLines(
c(
"Models built during stepwise regression:",
sapply(seq_along(model_log), function(i) {
sprintf(
"Model %d: %s\n  Accuracy: %.2f%%\n",
i, model_log[[i]]$Formula, model_log[[i]]$Accuracy
)
})
),
log_file
)
cat(sprintf("Model logs written to %s\n", log_file))
View(do.call(rbind, lapply(model_log, as.data.frame)))
# Full model for stepwise regression
full_model <- glm(Diagnosis ~ ., data = train_data, family = binomial)
# Initialize log storage
model_log <- list()
# Custom stepwise function to log models
stepwise_with_logging <- function(model) {
step_model <- model
count <- 0
# Perform stepwise regression while logging all models
repeat {
previous_formula <- as.character(formula(step_model))
step_model <- stepAIC(step_model, direction = "both", trace = FALSE)
current_formula <- as.character(formula(step_model))
# Check if the model changed
if (identical(previous_formula, current_formula)) {
break  # Stop if no further improvements
}
# Log the model
count <- count + 1
pred_probs <- predict(step_model, newdata = test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix) * 100
model_log[[count]] <- list(
Formula = current_formula,
Accuracy = accuracy
)
}
return(step_model)
}
# Run the stepwise regression
final_model <- stepwise_with_logging(full_model)
# Display only the first 10 models
cat("First 10 models built during stepwise regression:\n")
for (i in seq_len(min(10, length(model_log)))) {
cat(sprintf("Model %d: %s\n", i, model_log[[i]]$Formula))
cat(sprintf("  Accuracy: %.2f%%\n\n", model_log[[i]]$Accuracy))
}
# Save the first 10 logs to a file if needed
log_file <- "stepwise_first_10_models_log.txt"
writeLines(
c(
"First 10 models built during stepwise regression:",
sapply(seq_len(min(10, length(model_log))), function(i) {
sprintf(
"Model %d: %s\n  Accuracy: %.2f%%\n",
i, model_log[[i]]$Formula, model_log[[i]]$Accuracy
)
})
),
log_file
)
cat(sprintf("First 10 model logs written to %s\n", log_file))
# Use the final model for evaluation on the test set
final_model <- result$final_model
summary(final_model)
pred_probs <- predict(final_model, test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
# Confusion matrix for the test set
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
print(conf_matrix)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat(sprintf("Test Accuracy: %.2f%%\n", accuracy * 100))
# Load necessary libraries
library(MASS) # For stepAIC
library(caret)
# Example dataset
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# Split data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Full model for stepwise regression
full_model <- glm(Diagnosis ~ ., data = train_data, family = binomial)
# Perform stepwise regression
cat("Performing stepwise regression...\n")
final_model <- stepAIC(full_model, direction = "both", trace = FALSE)
# Evaluate the final model
pred_probs <- predict(final_model, newdata = test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix) * 100
# Print final model summary and accuracy
cat("Final Model Summary:\n")
print(summary(final_model))
cat(sprintf("\nAccuracy of the final model: %.2f%%\n", accuracy))
pred_probs <- predict(final_model, test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
# Confusion matrix for the test set
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
print(conf_matrix)
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# full model for stepwise regression
full_model <- glm(Diagnosis ~ ., data = train_data, family = binomial)
# stepwise regression
final_model <- stepAIC(full_model, direction = "backward", trace = FALSE)
# Evaluate the final model
pred_probs <- predict(final_model, newdata = test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix) * 100
# Print final model summary and accuracy
cat("Final Model Summary:\n")
print(summary(final_model))
cat(sprintf("\nAccuracy of the final model: %.2f%%\n", accuracy))
pred_probs <- predict(final_model, test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
# Confusion matrix for the test set
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
print(conf_matrix)
# full model for stepwise regression
full_model <- glm(Diagnosis ~ ., data = train_data, family = binomial)
# stepwise regression
final_model <- stepAIC(full_model, direction = "forward", trace = FALSE)
# evaluate the final model
pred_probs <- predict(final_model, newdata = test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix) * 100
# Print final model summary and accuracy
cat("Final Model Summary:\n")
print(summary(final_model))
cat(sprintf("\nAccuracy of the final model: %.2f%%\n", accuracy))
pred_probs <- predict(final_model, test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
# Confusion matrix for the test set
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
print(conf_matrix)
library(MASS)
library(caret)
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# full model for stepwise regression
full_model <- glm(Diagnosis ~ ., data = train_data, family = binomial)
# stepwise regression
final_model <- stepAIC(full_model, direction = "forward", trace = FALSE)
# evaluate the final model
pred_probs <- predict(final_model, newdata = test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
#metrics
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix) * 100
# print everything
print(summary(final_model))
cat(sprintf("\nAccuracy of the final model: %.2f%%\n", accuracy))
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
print(conf_matrix)
library(MASS)
library(caret)
library(car)
vif(final_model)
library(MASS)
library(caret)
library(car)
library(pROC)
roc_curve <- roc(test_data$Diagnosis, test_pred)
roc_curve <- roc(test_data$Diagnosis, pred_class)
auc_value <- auc(roc_curve)
print(paste("AUC: ", auc_value))
roc_curve <- roc(test_data$Diagnosis, pred_class)
auc_value <- auc(roc_curve)
print(paste("AUC: ", auc_value))
plot(roc_curve)
data <- read.csv("/Users/asus/Desktop/R/Liver_disease_data.csv")
data$Diagnosis <- as.factor(data$Diagnosis)
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
# data into train and test
set.seed(123)
trainIndex <- createDataPartition(data$Diagnosis, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# full model for stepwise regression
full_model <- glm(Diagnosis ~ ., data = train_data, family = binomial)
# stepwise regression
final_model <- stepAIC(full_model, direction = "forward", trace = FALSE)
# evaluate the final model
pred_probs <- predict(final_model, newdata = test_data, type = "response")
pred_class <- ifelse(pred_probs > 0.5, 1, 0)
#metrics
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix) * 100
# print everything
print(summary(final_model))
cat(sprintf("\nAccuracy of the final model: %.2f%%\n", accuracy))
conf_matrix <- table(Predicted = pred_class, Actual = test_data$Diagnosis)
print(conf_matrix)
roc_curve <- roc(test_data$Diagnosis, pred_probs)
auc_value <- auc(roc_curve)
roc_curve <- roc(test_data$Diagnosis, pred_probs)
auc_value <- auc(roc_curve)
print(summary(final_model))
cat(sprintf("\nAccuracy of the final model: %.2f%%\n", accuracy))
cat(sprintf("Precision: %.2f\n", precision))
cat(sprintf("Recall: %.2f\n", recall))
cat(sprintf("F1 Score: %.2f\n", f1_score))
cat(sprintf("AUC: %.2f\n", auc_value))
source("~/Desktop/IFB_project/scripts/stepwise_method.R", echo=TRUE)
roc_curve <- roc(test_data$Diagnosis, pred_probs)
auc_value <- auc(roc_curve)
cat(sprintf("AUC: %.2f\n", auc_value))
plot(roc_curve, main = "ROC Curve", col = "blue", lwd = 2)
roc_curve <- roc(test_data$Diagnosis, pred_probs)
auc_value <- auc(roc_curve)
cat(sprintf("AUC: %.2f\n", auc_value))
plot(roc_curve, main = "ROC Curve", col = "blue", lwd = 2)
plumber::plumb(file='Desktop/IFB_project/api/API_everything.R')$run()
plumber::plumb(file='Desktop/IFB_project/api/API_everything.R')$run()
plumber::plumb(file='Desktop/IFB_project/api/API_everything.R')$run()
plumber::plumb(file='Desktop/project_random_group/random-E11/R/03_API.R')$run()
plumber::plumb(file='Desktop/IFB_project/api/API_ML_models_prediction_and_metrics.R')$run()
library(shiny); runApp('Desktop/project_random_group/shiny.R')
runApp('Desktop/project_random_group/shiny.R')
runApp('Desktop/IFB_project/shiny.R')
runApp('Desktop/IFB_project/shiny.R')
